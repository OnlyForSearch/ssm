<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	id="WebApp_ID" version="3.0">
	<display-name>SpringMVCLesson</display-name>
	
	<!-- 加载spring容器 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/classes/spring/applicationContext-*.xml</param-value>
	</context-param>
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	
	<!-- springmvc前端控制器 -->
	<servlet>
		<servlet-name>SpringMVC</servlet-name>
		<!-- 可以看出DispatcherServlet主要就是拦截请求，然后调用对应的Controller和Action，
		解析和渲染指定的视图并返回响应 
			。 -->
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<!-- contextConfigLocation配置springmvc加载的配置文件（配置处理器映射器、适配器等等） 
		如果不配置contextConfigLocation，默认加载的是/WEB-INF/servlet名称-serlvet.xml
				（springmvc-servlet.xml） -->
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<!-- <param-value>classpath:springservlet-config.xml</param-value> -->
			<param-value>classpath:spring/springmvc.xml</param-value>
		</init-param>
		<!-- 是启动顺序，让这个Servlet随Servletp容器一起启动，必须放在<servlet> 配置的最后。 -->
		<load-on-startup>1</load-on-startup><!-- load-on-startup必须放在最后 -->
	</servlet>
	<!-- Spring MVC配置文件结束 -->

	<servlet-mapping>
		<servlet-name>SpringMVC</servlet-name>
		<!-- 是拦截所有的请求到该servlet -->
		<!-- 第一种：*.action，访问以.action结尾 由DispatcherServlet进行解析 -->
		<!-- <url-pattern>*.action</url-pattern> -->
		<!-- 第二种：/，所以访问的地址都由DispatcherServlet进行解析，对于静态文件的解析需要配置不让DispatcherServlet进行解析 
			使用此种方式可以实现 RESTful风格的url -->
		<url-pattern>/</url-pattern>
		<!-- 第三种：/*，这样配置不对，使用这种配置，最终要转发到一个jsp页面时， 仍然会由DispatcherServlet解析jsp地址，不能根据jsp页面找到handler，会报错。 -->


	</servlet-mapping>
	<!-- post乱码过虑器 -->
	<filter>
		<filter-name>CharacterEncodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>utf-8</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>CharacterEncodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<!-- Spring监听器 -->  
    <listener>  
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>  
    </listener>  
    <!-- 防止Spring内存溢出监听器 -->  
    <listener>  
        <listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>  
    </listener>  
  
	
	
</web-app>